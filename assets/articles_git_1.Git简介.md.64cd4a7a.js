import{_ as e,c as a,o as i,a as t}from"./app.2614b7c5.js";const m=JSON.parse('{"title":"Git的简介","description":"","frontmatter":{},"headers":[{"level":2,"title":"Git的诞生","slug":"git的诞生","link":"#git的诞生","children":[]},{"level":2,"title":"集中式VS分布式","slug":"集中式vs分布式","link":"#集中式vs分布式","children":[]},{"level":2,"title":"安装Git","slug":"安装git","link":"#安装git","children":[]},{"level":2,"title":"创建版本库","slug":"创建版本库","link":"#创建版本库","children":[{"level":3,"title":"添加文件到版本库","slug":"添加文件到版本库","link":"#添加文件到版本库","children":[]}]}],"relativePath":"articles/git/1.Git简介.md","lastUpdated":1677914720000}'),n={name:"articles/git/1.Git简介.md"},s=t(`<h1 id="git的简介" tabindex="-1">Git的简介 <a class="header-anchor" href="#git的简介" aria-hidden="true">#</a></h1><h2 id="git的诞生" tabindex="-1">Git的诞生 <a class="header-anchor" href="#git的诞生" aria-hidden="true">#</a></h2><p>Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。 Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？ 事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！ 你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。 不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。 安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。 Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的： Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。 Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h2 id="集中式vs分布式" tabindex="-1">集中式VS分布式 <a class="header-anchor" href="#集中式vs分布式" aria-hidden="true">#</a></h2><p>集中式：版本库存放在中央服务器，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。<br> 集中式版本控制系统最大的毛病就是必须联网才能工作（指无网络不可提交），如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676862117420-f3849f82-af71-4d77-94ca-0e3c47459966.png#averageHue=%23fcfcfc&amp;clientId=ub9867d19-3662-4&amp;from=paste&amp;height=312&amp;id=u696a05e9&amp;name=image.png&amp;originHeight=312&amp;originWidth=473&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54424&amp;status=done&amp;style=none&amp;taskId=u75c485c1-193a-4e36-b202-1b3b15da5a0&amp;title=&amp;width=473" alt="image.png"> 分布式： 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。<br> 和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。<br> 在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676862181860-8ca4aead-4685-4c12-beb3-1f063dde474f.png#averageHue=%23fcfcfc&amp;clientId=ub9867d19-3662-4&amp;from=paste&amp;height=444&amp;id=u224005ee&amp;name=image.png&amp;originHeight=444&amp;originWidth=542&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=96576&amp;status=done&amp;style=none&amp;taskId=udaa3a2a0-facd-4554-be74-625c44cb06f&amp;title=&amp;width=542" alt="image.png"></p><h2 id="安装git" tabindex="-1">安装Git <a class="header-anchor" href="#安装git" aria-hidden="true">#</a></h2><h2 id="创建版本库" tabindex="-1">创建版本库 <a class="header-anchor" href="#创建版本库" aria-hidden="true">#</a></h2><p>在文件夹内使用命令<code>git init -y</code>初始化仓库，初始化仓库后，会多一个<code>.git</code>文件夹，用来跟踪管理版本库。 <code>.git</code>文件夹默认隐藏，使用命令<code>ls -ah</code>后就可以看见。</p><h3 id="添加文件到版本库" tabindex="-1">添加文件到版本库 <a class="header-anchor" href="#添加文件到版本库" aria-hidden="true">#</a></h3><p>添加文件到版本库分两步： 第一步：使用命令<code>git add &lt;file&gt;</code>，<code>&lt;file&gt;</code>是文件名，表示添加文件到暂存区。</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git add test.txt # 添加单个文件</span></span>
<span class="line"><span style="color:#A6ACCD;">git add . # 添加所有文件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>第二步：使用命令<code>git commit -m &lt;message&gt;</code>，<code>&lt;message&gt;</code>表示描述信息，建议填写有意义的描述信息，这可以在历史记录里翻盖能占到样，例如：项目初始化完成、bug修复完成。。</p><blockquote><p>注意： 添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。</p></blockquote>`,13),d=[s];function r(c,l,p,o,g,h){return i(),a("div",null,d)}const f=e(n,[["render",r]]);export{m as __pageData,f as default};
