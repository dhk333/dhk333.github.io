import{_ as a,c as s,o as e,a as n}from"./app.2614b7c5.js";const C=JSON.parse('{"title":"时光机穿梭","description":"","frontmatter":{},"headers":[{"level":2,"title":"版本回退","slug":"版本回退","link":"#版本回退","children":[{"level":3,"title":"场景一","slug":"场景一","link":"#场景一","children":[]},{"level":3,"title":"HEAD指向","slug":"head指向","link":"#head指向","children":[]},{"level":3,"title":"场景二","slug":"场景二","link":"#场景二","children":[]}]},{"level":2,"title":"工作区和暂存区","slug":"工作区和暂存区","link":"#工作区和暂存区","children":[{"level":3,"title":"工作区(Working Directory)","slug":"工作区-working-directory","link":"#工作区-working-directory","children":[]},{"level":3,"title":"版本库（Repository）","slug":"版本库-repository","link":"#版本库-repository","children":[]}]},{"level":2,"title":"管理修改","slug":"管理修改","link":"#管理修改","children":[]},{"level":2,"title":"撤销修改","slug":"撤销修改","link":"#撤销修改","children":[{"level":3,"title":"场景一","slug":"场景一-1","link":"#场景一-1","children":[]},{"level":3,"title":"场景二","slug":"场景二-1","link":"#场景二-1","children":[]},{"level":3,"title":"场景三","slug":"场景三","link":"#场景三","children":[]}]},{"level":2,"title":"删除文件","slug":"删除文件","link":"#删除文件","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"relativePath":"articles/git/2.时光机穿梭.md","lastUpdated":1677834160000}'),p={name:"articles/git/2.时光机穿梭.md"},t=n(`<h1 id="时光机穿梭" tabindex="-1">时光机穿梭 <a class="header-anchor" href="#时光机穿梭" aria-hidden="true">#</a></h1><h2 id="版本回退" tabindex="-1">版本回退 <a class="header-anchor" href="#版本回退" aria-hidden="true">#</a></h2><p>在Git中，有这么一个词，&quot;快照，&quot;快照&quot;其实就是Git中的<code>commit</code>，相当于存档，当上传后想回退上一个版本时，可以从最近的一个<code>commit</code>恢复。 使用<code>git log</code>可以查看<code>commit</code>的记录，从而可以很方便回到想回到的版本。</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git log</span></span>
<span class="line"><span style="color:#A6ACCD;">commit c70171709f9735ba59c85aa8cd3a3f669683c207 (HEAD -&gt; master)</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Mon Feb 20 15:45:14 2023 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    text1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit e90e1c0c135918c1bbf9d3b0922728201e1bad97 (origin/master)</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 17:44:45 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    update md文件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit 61fd843ad01f72c54b480bb918f180888c18f170</span></span>
<span class="line"><span style="color:#A6ACCD;">Merge: 914e39d dcf19df</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 17:38:23 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    Merge branch &#39;home&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit 914e39dd16885733c5151f3174a2e48f3683fc19</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 17:34:27 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    主分支提交</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit dcf19df43cb1a15c4a9aefd452e87c519347d0ab</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 17:32:55 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    提交home</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit 734054452aebf44665c65f8eb5c06c7b884b6e48</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 17:31:00 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    这是home分支</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit 597ccc53ed17046d35b9edc61b52178640b41ed5</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 17:28:54 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    更新</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit e3fa486fbbf41553234882b7f03b05a208b23ac0</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 14:38:10 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    最最后一次提交</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit 4382e608f009d4bfff7817d98853a4e687de64e2</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 14:31:36 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    第三次提交</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit 2cbe43e751e3a2b125643a60f9ab03a0b3e5a4fd</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 14:28:43 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    第二次提交</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit e234bc0bd2da690e8c9d413eee756d15d7619803</span></span>
<span class="line"><span style="color:#A6ACCD;">Author: 15779728359 &lt;1731381719@qq.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">Date:   Tue Sep 27 14:22:16 2022 +0800</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    创建products分支，并第一次上传文件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>觉得信息太乱，<code>git log</code>后添加<code>--pretty=oneline</code>输出：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git log --pretty=oneline</span></span>
<span class="line"><span style="color:#A6ACCD;">c70171709f9735ba59c85aa8cd3a3f669683c207 (HEAD -&gt; master) text1       </span></span>
<span class="line"><span style="color:#A6ACCD;">e90e1c0c135918c1bbf9d3b0922728201e1bad97 (origin/master) update md文件</span></span>
<span class="line"><span style="color:#A6ACCD;">61fd843ad01f72c54b480bb918f180888c18f170 Merge branch &#39;home&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">914e39dd16885733c5151f3174a2e48f3683fc19 主分支提交</span></span>
<span class="line"><span style="color:#A6ACCD;">dcf19df43cb1a15c4a9aefd452e87c519347d0ab 提交home</span></span>
<span class="line"><span style="color:#A6ACCD;">734054452aebf44665c65f8eb5c06c7b884b6e48 这是home分支</span></span>
<span class="line"><span style="color:#A6ACCD;">597ccc53ed17046d35b9edc61b52178640b41ed5 更新</span></span>
<span class="line"><span style="color:#A6ACCD;">e3fa486fbbf41553234882b7f03b05a208b23ac0 最最后一次提交</span></span>
<span class="line"><span style="color:#A6ACCD;">4382e608f009d4bfff7817d98853a4e687de64e2 第三次提交</span></span>
<span class="line"><span style="color:#A6ACCD;">2cbe43e751e3a2b125643a60f9ab03a0b3e5a4fd 第二次提交</span></span>
<span class="line"><span style="color:#A6ACCD;">e234bc0bd2da690e8c9d413eee756d15d7619803 创建products分支，并第一次上传文件</span></span>
<span class="line"><span style="color:#A6ACCD;">c809eb629b5a2141d912016c1611f4723984d086 初始化完成</span></span>
<span class="line"><span style="color:#A6ACCD;">f93d4cbc0f7bce5e2b997eabffdd5a664bb30219 初始化 添加自述文件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>c70171709f9735ba59c85aa8cd3a3f669683c207</code>类似这样的是<code>commit id</code>(版本号) 要回退上一个版本，首先要知道现在是哪个版本，在Git中，<code>HEAD</code>表示当前版本，<code>HEAD^</code>表示上一个版本，<code>HEAD^^</code>表示上上个版本，往上100个<code>^</code>数不过来，可以简写为<code>HEAD~100</code>。 回退上一个版本使用命令<code>git reset</code></p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git reset --hard HEAD^ # --hard 参数后面讲</span></span>
<span class="line"><span style="color:#A6ACCD;">HEAD is now at 61fd843 Merge branch &#39;home&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="场景一" tabindex="-1">场景一 <a class="header-anchor" href="#场景一" aria-hidden="true">#</a></h3><p>现在发现版本回退到了上一版本，使用<code>git log</code>发现最新的版本已经不在了，还想回去怎么办。 办法：只要上面的命令行没有关闭，顺着找，找到那个版本的<code>comit id</code>，就是那串特别长的数字，就可以再回去。</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git reset --hard c70171709f9735ba59c85aa8cd3a3f669683c207</span></span>
<span class="line"><span style="color:#A6ACCD;">HEAD is now at c701717 text1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>注意：版本号可以不写全，Git会自动去找。</p></blockquote><h3 id="head指向" tabindex="-1">HEAD指向 <a class="header-anchor" href="#head指向" aria-hidden="true">#</a></h3><p>Git回退速度很快，因为在 内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向新的指向 <img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676880250713-73b9e4d0-6fbf-4b9e-91c6-cc7443be6831.png#averageHue=%23fcfcfb&amp;clientId=ud916808d-0b3b-4&amp;from=paste&amp;height=158&amp;id=u98055d39&amp;name=image.png&amp;originHeight=158&amp;originWidth=290&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7473&amp;status=done&amp;style=none&amp;taskId=u5085805e-6608-448a-8963-08887013e35&amp;title=&amp;width=290" alt="image.png"> 改为旧的 <img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676880256412-04713fa4-d749-41b2-b7f5-9023d1e8aa99.png#averageHue=%23fcfbfa&amp;clientId=ud916808d-0b3b-4&amp;from=paste&amp;height=140&amp;id=u8681e072&amp;name=image.png&amp;originHeight=140&amp;originWidth=282&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6669&amp;status=done&amp;style=none&amp;taskId=u2867022c-8543-4983-bbee-e7f71aebeca&amp;title=&amp;width=282" alt="image.png"><br> 让<code>HEAD</code>指向哪个版本号，就把当前版本定位在哪。</p><h3 id="场景二" tabindex="-1">场景二 <a class="header-anchor" href="#场景二" aria-hidden="true">#</a></h3><p>回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？<br> 办法： Git提供了一个命令<code>git reflog</code>用来记录每一次命令：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git reflog</span></span>
<span class="line"><span style="color:#A6ACCD;">c701717 (HEAD -&gt; master) HEAD@{0}: reset: moving to c70171709f9735ba59c85aa8cd3a3f669683c207</span></span>
<span class="line"><span style="color:#A6ACCD;">f93d4cb HEAD@{1}: reset: moving to HEAD^^^^</span></span>
<span class="line"><span style="color:#A6ACCD;">4382e60 HEAD@{2}: reset: moving to HEAD^^^</span></span>
<span class="line"><span style="color:#A6ACCD;">7340544 HEAD@{3}: reset: moving to HEAD^^</span></span>
<span class="line"><span style="color:#A6ACCD;">61fd843 HEAD@{4}: reset: moving to HEAD^</span></span>
<span class="line"><span style="color:#A6ACCD;">e90e1c0 (origin/master) HEAD@{5}: reset: moving to HEAD^</span></span>
<span class="line"><span style="color:#A6ACCD;">c701717 (HEAD -&gt; master) HEAD@{6}: commit: text1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>现在知道了<code>text1</code>的<code>commit id</code>是<code>c701717</code>，现在又可以使用<code>git reset</code>回退到最新版本了。</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git reset --hard c701717</span></span>
<span class="line"><span style="color:#A6ACCD;">HEAD is now at c701717 text1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="工作区和暂存区" tabindex="-1">工作区和暂存区 <a class="header-anchor" href="#工作区和暂存区" aria-hidden="true">#</a></h2><h3 id="工作区-working-directory" tabindex="-1">工作区(Working Directory) <a class="header-anchor" href="#工作区-working-directory" aria-hidden="true">#</a></h3><p>电脑里能看到的目录，比如我的<code>learngit</code>文件夹就是一个工作区：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676881177162-6a5d270b-1c1b-477a-b564-9f5cdbb15e00.png#averageHue=%23e6e6e5&amp;clientId=ud916808d-0b3b-4&amp;from=paste&amp;height=362&amp;id=u5f29af72&amp;name=image.png&amp;originHeight=362&amp;originWidth=635&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50104&amp;status=done&amp;style=none&amp;taskId=u898546a7-89f6-42f6-b36d-9e668eee271&amp;title=&amp;width=635" alt="image.png"></p><h3 id="版本库-repository" tabindex="-1">版本库（Repository） <a class="header-anchor" href="#版本库-repository" aria-hidden="true">#</a></h3><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。 Git的版本库里存了很多东西，其中最重要的就是称为<code>stage</code>（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p>前面说把文件添加进Git版本库的时候，有两步： 第一步：<code>git add</code>添加文件进去，实际上就是添加进暂存区。 第二步：<code>git commit</code>提交更改，实际上就是把暂存区的所有内容添加到当前分支。 <img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676881866418-7f842b4c-51d6-4536-b53d-284e4332fad1.png#averageHue=%23e8e8e8&amp;clientId=ud916808d-0b3b-4&amp;from=paste&amp;height=234&amp;id=u440d06ab&amp;name=image.png&amp;originHeight=234&amp;originWidth=458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50012&amp;status=done&amp;style=none&amp;taskId=u4aae268e-8548-4319-9007-fa2bd1c2662&amp;title=&amp;width=458" alt="image.png"> 创建Git仓库时，Git自动创建了唯一一个<code>master</code>分支，所以现在<code>git commit</code>就是往<code>master</code>分支上提交更改。 当<code>git commit</code>后，暂存区所有内容添加到当前分支，又没有任何修改，那么工作区就是&quot;干净&quot;的。现在版本库变成了这样，暂存区就没有任何内容了。 <img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676881696406-a6681359-9d0f-4d4f-946a-9a9b88609c93.png#averageHue=%23ededed&amp;clientId=ud916808d-0b3b-4&amp;from=paste&amp;height=234&amp;id=u93fb9452&amp;name=image.png&amp;originHeight=234&amp;originWidth=463&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44340&amp;status=done&amp;style=none&amp;taskId=u0f513674-5b17-4487-be51-0d7f44eb1b0&amp;title=&amp;width=463" alt="image.png"></p><h2 id="管理修改" tabindex="-1">管理修改 <a class="header-anchor" href="#管理修改" aria-hidden="true">#</a></h2><blockquote><p>Git跟踪的是修改，不是文件。</p></blockquote><p>什么是修改？比如新增一行，是一个修改；删除一行，也是一个修改；更改某个字符，也是一个修改；删除一些新增一些，也是修改；甚至创建一个新文件，也算一个修改； 例子： 新增内容，text1.txt <code>upodata update2</code> 然后添加： <code>git add text1.txt</code><code>git status #查看状态</code> 输出： <img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676884533595-2956047c-a941-42ca-99c5-ef4cf65872dc.png#averageHue=%232a3039&amp;clientId=ud916808d-0b3b-4&amp;from=paste&amp;height=88&amp;id=u08cf6fd1&amp;name=image.png&amp;originHeight=88&amp;originWidth=372&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6231&amp;status=done&amp;style=none&amp;taskId=ua152b77e-beca-4a13-b708-c010aee8917&amp;title=&amp;width=372" alt="image.png"> 然后，再修改： <code>upodata update2 update3</code> 提交： <code>git commit -m &#39;update text&#39;</code> 然后查看状态： <img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676884702431-a01bb226-04ec-421c-82f3-4d9003b9a294.png#averageHue=%232a3039&amp;clientId=ud916808d-0b3b-4&amp;from=paste&amp;height=138&amp;id=u1a9ce45f&amp;name=image.png&amp;originHeight=138&amp;originWidth=515&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12393&amp;status=done&amp;style=none&amp;taskId=u4135adcf-e2f7-4747-a487-fd4f70b264b&amp;title=&amp;width=515" alt="image.png"> 怎么没有提交？</p><blockquote><p>回顾下过程： 第一次修改=》<code>git add</code>=》第二次修改=》<code>git commit</code> 前面讲了Git管理的是提交，当使用<code>git add</code>命令的时候，在工作区的第一次修改放入了暂存区，准备提交，但是第二次的修改没有被放入暂存区，所以<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交，第二次的没有。</p></blockquote><p>提交后，用<code>git diff HEAD -- text1.txt</code>命令可以查看工作区和版本库里面最新版本的区别：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1676885036502-1035f2ec-55fc-4609-a731-1b82a6a0be7b.png#averageHue=%232a3039&amp;clientId=ud916808d-0b3b-4&amp;from=paste&amp;height=212&amp;id=ua90790dc&amp;name=image.png&amp;originHeight=212&amp;originWidth=363&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13431&amp;status=done&amp;style=none&amp;taskId=u4b06ad7c-473c-4643-b2cd-eec3f340286&amp;title=&amp;width=363" alt="image.png"> 可见第一次修改没有被提交。 那怎么提交第二次修改呢？</p><blockquote><p>可以继续<code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了： 过程： 第一次修改 =&gt; <code>git add</code> =&gt; 第二次修改 =&gt; <code>git add</code> =&gt; <code>git commit</code></p></blockquote><p>结论：证明提交的是修改不是文件，所以确保<code>commit</code>之前<code>add</code>所有文件。</p><h2 id="撤销修改" tabindex="-1">撤销修改 <a class="header-anchor" href="#撤销修改" aria-hidden="true">#</a></h2><h3 id="场景一-1" tabindex="-1">场景一 <a class="header-anchor" href="#场景一-1" aria-hidden="true">#</a></h3><p>当改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，使用<code>git checkout -- &lt;file&gt;</code>。</p><h3 id="场景二-1" tabindex="-1">场景二 <a class="header-anchor" href="#场景二-1" aria-hidden="true">#</a></h3><p>当不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><h3 id="场景三" tabindex="-1">场景三 <a class="header-anchor" href="#场景三" aria-hidden="true">#</a></h3><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，使用<code>git reset --hard HEAD^</code>，返回上一版本，不过前提是没有推送到远程库。</p><h2 id="删除文件" tabindex="-1">删除文件 <a class="header-anchor" href="#删除文件" aria-hidden="true">#</a></h2><p>在Git中，删除也是一个修改操作。 一般情况下，通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> rm text.txt</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这个时候，Git知道删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉哪些文件被删除了：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span>
<span class="line"><span style="color:#A6ACCD;">On branch master</span></span>
<span class="line"><span style="color:#A6ACCD;">Changes not staged for commit:</span></span>
<span class="line"><span style="color:#A6ACCD;">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span></span>
<span class="line"><span style="color:#A6ACCD;">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span></span>
<span class="line"><span style="color:#A6ACCD;">        deleted:    text.txt</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>现在有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git rm text.txt</span></span>
<span class="line"><span style="color:#A6ACCD;">rm &#39;text.txt&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">git commit -m &#39;rm text.txt&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">[master eb18dde] rm text.txt</span></span>
<span class="line"><span style="color:#A6ACCD;"> 1 file changed, 1 deletion(-)</span></span>
<span class="line"><span style="color:#A6ACCD;"> delete mode 100644 text.txt</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>现在，文件就从版本库中被删除了。<br> 提示：先手动删除文件，然后使用<code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的。</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git status</span></span>
<span class="line"><span style="color:#A6ACCD;">On branch master</span></span>
<span class="line"><span style="color:#A6ACCD;">nothing to commit, working tree clean</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git checkout -- text.txt</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>git checkout -- &lt;file&gt;</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h2><ol><li>使用命令<code>git add</code>可以将文件添加到暂存区；</li><li>使用命令<code>git commit</code>将暂存区的文件添加到版本库；</li><li>使用命令<code>git status</code>可以查看当前状态；</li><li>使用<code>git log</code>可以打印历史记录，一长串数字是<code>commit id</code>，<code>git log</code>后面加<code>--pretty=oneline</code>可以简化输出；</li><li>使用命令<code>git reset</code>回退上一个版本；</li><li><code>git reflog</code>用来记录每一次命令；</li><li>当改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，使用<code>git checkout -- &lt;file&gt;</code>。</li><li>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容；</li></ol>`,53),l=[t];function o(c,i,d,r,m,g){return e(),s("div",null,l)}const h=a(p,[["render",o]]);export{C as __pageData,h as default};
