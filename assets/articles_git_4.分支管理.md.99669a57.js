import{_ as e,c as a,o as s,a as n}from"./app.2614b7c5.js";const t="/assets/分支策略.aa0ece3f.png",u=JSON.parse('{"title":"分支管理","description":"","frontmatter":{},"headers":[{"level":2,"title":"创建与合并分支","slug":"创建与合并分支","link":"#创建与合并分支","children":[{"level":3,"title":"创建分支","slug":"创建分支","link":"#创建分支","children":[]},{"level":3,"title":"合并分支","slug":"合并分支","link":"#合并分支","children":[]},{"level":3,"title":"switch","slug":"switch","link":"#switch","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]},{"level":2,"title":"解决冲突","slug":"解决冲突","link":"#解决冲突","children":[]},{"level":2,"title":"分支管理策略","slug":"分支管理策略","link":"#分支管理策略","children":[{"level":3,"title":"分支策略","slug":"分支策略","link":"#分支策略","children":[]},{"level":3,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]}]},{"level":2,"title":"Bug分支","slug":"bug分支","link":"#bug分支","children":[]},{"level":2,"title":"Featrue分支","slug":"featrue分支","link":"#featrue分支","children":[]},{"level":2,"title":"多人协作","slug":"多人协作","link":"#多人协作","children":[]},{"level":2,"title":"Rebase","slug":"rebase","link":"#rebase","children":[]}],"relativePath":"articles/git/4.分支管理.md","lastUpdated":1677834160000}'),c={name:"articles/git/4.分支管理.md"},l=n(`<h1 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-hidden="true">#</a></h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。 如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！ <img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1677552703280-49e8004a-f47e-4345-a2cf-d6d10c8fafb9.png#averageHue=%23f9f9f9&amp;clientId=ufd20c8fc-48e0-4&amp;from=paste&amp;id=u920bee9a&amp;originHeight=174&amp;originWidth=509&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ue2bc7e85-0f00-43a3-825d-b4d2d043c75&amp;title=" alt=""> 分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。 现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。 其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。 但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p><h2 id="创建与合并分支" tabindex="-1">创建与合并分支 <a class="header-anchor" href="#创建与合并分支" aria-hidden="true">#</a></h2><h3 id="创建分支" tabindex="-1">创建分支 <a class="header-anchor" href="#创建分支" aria-hidden="true">#</a></h3><p>首次创建<code>dev</code>分支，然后切换到<code>dev</code>分支</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git checkout -b dev</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git branch dev</span></span>
<span class="line"><span style="color:#A6ACCD;">$ git checkout dev</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>然后，用<code>git branch</code>命令查看当前分支：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git branch</span></span>
<span class="line"><span style="color:#A6ACCD;">* dev</span></span>
<span class="line"><span style="color:#A6ACCD;">  master</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。 然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Creating a new branch is quick.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>然后提交：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git add readme.txt </span></span>
<span class="line"><span style="color:#A6ACCD;">$ git commit -m &quot;branch test&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">[dev b17d20e] branch test</span></span>
<span class="line"><span style="color:#A6ACCD;"> 1 file changed, 1 insertion(+)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git checkout master</span></span>
<span class="line"><span style="color:#A6ACCD;">Switched to branch &#39;master&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1677552974380-a480e114-b0b4-42e3-92bc-7f27f4e1d840.png#averageHue=%23fbfafa&amp;clientId=ufd20c8fc-48e0-4&amp;from=paste&amp;id=u3587250b&amp;originHeight=222&amp;originWidth=419&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u2c4b1ea5-ccca-4c50-a88b-4452949a697&amp;title=" alt=""></p><h3 id="合并分支" tabindex="-1">合并分支 <a class="header-anchor" href="#合并分支" aria-hidden="true">#</a></h3><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git merge dev</span></span>
<span class="line"><span style="color:#A6ACCD;">Updating d46f35e..b17d20e</span></span>
<span class="line"><span style="color:#A6ACCD;">Fast-forward</span></span>
<span class="line"><span style="color:#A6ACCD;"> readme.txt | 1 +</span></span>
<span class="line"><span style="color:#A6ACCD;"> 1 file changed, 1 insertion(+)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。 注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。 当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。 合并完成后，就可以放心地删除<code>dev</code>分支了：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git branch -d dev</span></span>
<span class="line"><span style="color:#A6ACCD;">Deleted branch dev (was b17d20e).</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git branch</span></span>
<span class="line"><span style="color:#A6ACCD;">* master</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h3 id="switch" tabindex="-1">switch <a class="header-anchor" href="#switch" aria-hidden="true">#</a></h3><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。 实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支： 创建并切换到新的<code>dev</code>分支，可以使用：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git switch -c dev</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>直接切换到已有的<code>master</code>分支，可以使用 ：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">git switch master</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-hidden="true">#</a></h3><p>Git鼓励大量使用分支： 查看分支：<code>git branch</code> 创建分支：<code>git branch &lt;name&gt;</code> 切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code> 创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code> 合并某分支到当前分支：<code>git merge &lt;name&gt;</code> 删除分支：<code>git branch -d &lt;name&gt;</code></p><h2 id="解决冲突" tabindex="-1">解决冲突 <a class="header-anchor" href="#解决冲突" aria-hidden="true">#</a></h2><h2 id="分支管理策略" tabindex="-1">分支管理策略 <a class="header-anchor" href="#分支管理策略" aria-hidden="true">#</a></h2><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。 如果要强制禁用<code>Fast forward</code>模式，Git就会在<code>merge</code>时生成一个新的<code>commit</code>，这样，从分支历史上就可以看出分支信息。 下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>： 首先，仍然创建并切换<code>dev</code>分支：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git switch -c dev</span></span>
<span class="line"><span style="color:#A6ACCD;">Switched to a new branch &#39;dev&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>修改<code>readme.txt</code>文件，并提交一个新的<code>commit</code>：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git add readme.txt </span></span>
<span class="line"><span style="color:#A6ACCD;">$ git commit -m &quot;add merge&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">[dev f52c633] add merge</span></span>
<span class="line"><span style="color:#A6ACCD;"> 1 file changed, 1 insertion(+)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>现在，我们切换回<code>master</code>：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git switch master</span></span>
<span class="line"><span style="color:#A6ACCD;">Switched to branch &#39;master&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span></span>
<span class="line"><span style="color:#A6ACCD;">Merge made by the &#39;recursive&#39; strategy.</span></span>
<span class="line"><span style="color:#A6ACCD;"> readme.txt | 1 +</span></span>
<span class="line"><span style="color:#A6ACCD;"> 1 file changed, 1 insertion(+)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>因为本次合并要创建一个新的<code>commit</code>，所以加上<code>-m</code>参数，把<code>commit</code>描述写进去。 合并后，我们用<code>git log</code>看看分支历史：</p><div class="language-git"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$ git log --graph --pretty=oneline --abbrev-commit</span></span>
<span class="line"><span style="color:#A6ACCD;">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span></span>
<span class="line"><span style="color:#A6ACCD;">|\\  </span></span>
<span class="line"><span style="color:#A6ACCD;">| * f52c633 (dev) add merge</span></span>
<span class="line"><span style="color:#A6ACCD;">|/  </span></span>
<span class="line"><span style="color:#A6ACCD;">*   cf810e4 conflict fixed</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>可以看到，不使用<code>Fast forward</code>模式，<code>merge</code>后就像这样：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32665636/1677749511116-166df6cd-3363-4497-88bd-c22669ce153c.png#averageHue=%23fcfbfb&amp;clientId=uc1171269-b8db-4&amp;from=paste&amp;id=ufea1aabc&amp;originHeight=257&amp;originWidth=480&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ubdaf3a47-f197-417e-81b4-1cd18faf0f2&amp;title=" alt=""></p><h3 id="分支策略" tabindex="-1">分支策略 <a class="header-anchor" href="#分支策略" aria-hidden="true">#</a></h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理： 首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活； 那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如<code>1.0</code>版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布<code>1.0</code>版本； 你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。 所以，团队合作的分支看起来就像这样：</p><p><img src="`+t+'" alt=""></p><h3 id="小结-1" tabindex="-1">小结 <a class="header-anchor" href="#小结-1" aria-hidden="true">#</a></h3><p>Git分支十分强大，在团队开发中应该充分应用。 合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h2 id="bug分支" tabindex="-1">Bug分支 <a class="header-anchor" href="#bug分支" aria-hidden="true">#</a></h2><h2 id="featrue分支" tabindex="-1">Featrue分支 <a class="header-anchor" href="#featrue分支" aria-hidden="true">#</a></h2><h2 id="多人协作" tabindex="-1">多人协作 <a class="header-anchor" href="#多人协作" aria-hidden="true">#</a></h2><h2 id="rebase" tabindex="-1">Rebase <a class="header-anchor" href="#rebase" aria-hidden="true">#</a></h2>',55),o=[l];function i(p,d,r,h,g,m){return s(),a("div",null,o)}const A=e(c,[["render",i]]);export{u as __pageData,A as default};
